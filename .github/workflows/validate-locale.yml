name: JSON File Validation
on:
  pull_request_target:
    branches: [ main ]
    paths:
      - 'languages/**/*.json'

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Get changed files
        id: changed-files
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const jsonFiles = files
              .filter(file => 
                file.status !== 'removed' && 
                file.filename.endsWith('.json') &&
                file.filename.startsWith('languages/')
              )
              .map(file => file.filename);
            
            console.log('All changed files:', files.map(f => f.filename));
            console.log('JSON files to validate:', jsonFiles);
            
            if (jsonFiles.length === 0) {
              core.notice('No JSON files were modified in this PR');
            }
            
            core.setOutput('files', jsonFiles.join('\n'));
            core.exportVariable('CHANGED_FILES', jsonFiles.join('\n'));
            core.setOutput('json_file_count', jsonFiles.length);

      - name: Run validation script
        id: validation
        continue-on-error: true
        run: |
          python scripts/validate_json.py
          echo "script_exit_code=$?" >> $GITHUB_ENV

      - name: Process validation results
        id: process-results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## JSON Validation Results\n\n';
            let validationFailed = false;
            
            try {
              const scriptExitCode = parseInt(process.env.script_exit_code || '0');
              const results = JSON.parse(fs.readFileSync('validation-results.json', 'utf8'));
              const summary = results.summary;
              
              if (summary.total === 0) {
                comment += '⚠️ No JSON files were found in this PR for validation.\n';
              } else {
                comment += `### Summary\n`;
                comment += `- Total files validated: ${summary.total}\n`;
                comment += `- ✅ Passed: ${summary.passed}\n`;
                comment += `- ❌ Failed: ${summary.failed}\n\n`;
                
                if (summary.failed > 0) {
                  validationFailed = true;
                  comment += `### Detailed Results\n\n`;
                  for (const result of results.results) {
                    if (result.success) {
                      comment += `#### ✅ \`${result.file}\`\n`;
                      comment += 'JSON syntax validation passed successfully.\n\n';
                    } else {
                      comment += `#### ❌ \`${result.file}\`\n`;
                      comment += 'The following issues were found:\n';
                      result.errors.forEach(error => {
                        comment += `- ${error}\n`;
                      });
                      comment += '\n';
                    }
                  }
                }
              }

              // Check if script execution failed
              if (scriptExitCode !== 0) {
                validationFailed = true;
              }
              
            } catch (error) {
              validationFailed = true;
              comment += '⚠️ Error occurred while processing validation results.\n';
              comment += `Error details: ${error.message}\n`;
            }
            
            // Post comment to PR
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

            // Set step output
            core.setOutput('validation_failed', validationFailed);
            
            // Fail the workflow if validation failed
            if (validationFailed) {
              core.setFailed('JSON validation failed or encountered errors');
            }

      - name: Fail if validation failed
        if: steps.process-results.outputs.validation_failed == 'true'
        run: exit 1
